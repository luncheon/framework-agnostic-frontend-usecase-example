{"version":3,"sources":["../../../usecase/es/WorksheetOperations.js","Worksheet.tsx","index.tsx","../../../usecase/es/Worksheet.js","../../common/createWorksheet.ts","../../common/createWorksheetKeyEventHandler.ts"],"names":["WorksheetOperations_WorksheetOperations","WorksheetOperations","update","Object","classCallCheck","this","createClass","key","value","rowIndex","columnIndex","_ref","maxCellAddress","activeCellAddress","rowOffset","columnOffset","_ref2","Math","min","max","content","_ref3","_ref3$activeCellAddre","cellContents","row","length","pop","mapRangeInclusive","callback","result","Array","i","WorksheetCellMemoized","React","memo","active","react_default","a","createElement","className","data-row-index","data-column-index","defaultValue","autoFocus","WorksheetRowMemoized","activeCellIndex","maxColumnIndex","WorksheetTableHeader","WorksheetTableMemoized","_ref4","_ref4$worksheet","worksheet","worksheetOperations","Worksheet_WorksheetTableHeader","onClick","useCallback","event","dataset","target","setActiveCellAddress","onChange","HTMLInputElement","setActiveCellContent","undefined","ReactDOM","render","_React$useState","useState","_React$useState2","slicedToArray","state","setState","mutate","produce","useEffect","operations","handleKeyDown","keyCode","preventDefault","moveActiveCellAddress","shiftKey","window","addEventListener","removeEventListener","document","body","appendChild"],"mappings":"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","file":"static/js/main.cfc58dcc.chunk.js","sourcesContent":["import _classCallCheck from \"/Users/takeuchi.kazuto/projects/framework-agnostic-frontend-usecase-example/apps/react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/takeuchi.kazuto/projects/framework-agnostic-frontend-usecase-example/apps/react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nexport var WorksheetOperations =\n/*#__PURE__*/\nfunction () {\n  function WorksheetOperations(update) {\n    _classCallCheck(this, WorksheetOperations);\n\n    this.update = update;\n  }\n\n  _createClass(WorksheetOperations, [{\n    key: \"setActiveCellAddress\",\n    value: function setActiveCellAddress(rowIndex, columnIndex) {\n      this.update(function (_ref) {\n        var maxCellAddress = _ref.maxCellAddress,\n            activeCellAddress = _ref.activeCellAddress;\n\n        if (typeof rowIndex === 'number' && rowIndex >= 0 && rowIndex <= maxCellAddress.rowIndex) {\n          activeCellAddress.rowIndex = rowIndex;\n        }\n\n        if (typeof columnIndex === 'number' && columnIndex >= 0 && columnIndex <= maxCellAddress.columnIndex) {\n          activeCellAddress.columnIndex = columnIndex;\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"moveActiveCellAddress\",\n    value: function moveActiveCellAddress(rowOffset, columnOffset) {\n      this.update(function (_ref2) {\n        var maxCellAddress = _ref2.maxCellAddress,\n            activeCellAddress = _ref2.activeCellAddress;\n\n        if (typeof rowOffset === 'number' && rowOffset) {\n          activeCellAddress.rowIndex = Math.min(Math.max(0, activeCellAddress.rowIndex + rowOffset), maxCellAddress.rowIndex);\n        }\n\n        if (typeof columnOffset === 'number' && columnOffset) {\n          activeCellAddress.columnIndex = Math.min(Math.max(0, activeCellAddress.columnIndex + columnOffset), maxCellAddress.columnIndex);\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"setActiveCellContent\",\n    value: function setActiveCellContent(content) {\n      this.update(function (_ref3) {\n        var _ref3$activeCellAddre = _ref3.activeCellAddress,\n            rowIndex = _ref3$activeCellAddre.rowIndex,\n            columnIndex = _ref3$activeCellAddre.columnIndex,\n            cellContents = _ref3.cellContents;\n\n        if (content) {\n          cellContents[rowIndex] = cellContents[rowIndex] || [];\n          cellContents[rowIndex][columnIndex] = content;\n        } else {\n          var row = cellContents[rowIndex];\n\n          if (!row || !row[columnIndex]) {\n            return;\n          }\n\n          delete cellContents[rowIndex][columnIndex];\n\n          while (row.length && !row[row.length - 1]) {\n            row.pop();\n          }\n\n          if (row.length) {\n            return;\n          }\n\n          delete cellContents[rowIndex];\n\n          while (cellContents.length && !cellContents[cellContents.length - 1]) {\n            cellContents.pop();\n          }\n        }\n      });\n      return this;\n    }\n  }]);\n\n  return WorksheetOperations;\n}();","import produce from 'immer'\nimport React from 'react'\nimport { Worksheet, WorksheetOperations } from '../../../usecase'\nimport createWorksheet from '../../common/createWorksheet'\nimport createWorksheetKeyEventHandler from '../../common/createWorksheetKeyEventHandler'\n\nconst mapRangeInclusive: <T>(max: number, callback: (n: number) => T) => T[] =\n  (max, callback) => {\n    const result = Array(max + 1)\n    for (let i = 0; i <= max; i++) {\n      result[i] = callback(i)\n    }\n    return result\n  }\n\nconst WorksheetCell: React.SFC<{\n  rowIndex: number\n  columnIndex: number\n  active: boolean\n  content?: string\n}> = ({ rowIndex, columnIndex, active, content }) => (\n  <td\n    className={active ? 'active' : ''}\n    data-row-index={rowIndex}\n    data-column-index={columnIndex}\n  >\n    {active ? <input defaultValue={content} autoFocus /> : content}\n  </td>\n)\nconst WorksheetCellMemoized = React.memo(WorksheetCell)\n\nconst WorksheetRow: React.SFC<{\n  rowIndex: number\n  row?: string[]\n  activeCellIndex?: number\n  maxColumnIndex: number\n}> = ({ rowIndex, row, activeCellIndex, maxColumnIndex }) => (\n  <tr>\n    <th>{rowIndex}</th>\n    {\n      mapRangeInclusive(maxColumnIndex, columnIndex => (\n        <WorksheetCellMemoized\n          key={columnIndex}\n          rowIndex={rowIndex}\n          columnIndex={columnIndex}\n          active={columnIndex === activeCellIndex}\n          content={row && row[columnIndex]}\n        />\n      ))\n    }\n  </tr>\n)\nconst WorksheetRowMemoized = React.memo(WorksheetRow)\n\nconst WorksheetTableHeader: React.SFC<{\n  maxColumnIndex: number\n}> = ({ maxColumnIndex }) => (\n  <thead>\n    <tr>\n      <th></th>\n      {mapRangeInclusive(maxColumnIndex, columnIndex => <th key={columnIndex}>{columnIndex}</th>)}\n    </tr>\n  </thead>\n)\n\nconst WorksheetTable: React.SFC<{\n  worksheet: Worksheet\n  worksheetOperations: WorksheetOperations\n}> = ({ worksheet: { maxCellAddress, activeCellAddress, cellContents }, worksheetOperations }) => (\n  <table className='worksheet'>\n    <WorksheetTableHeader maxColumnIndex={maxCellAddress.columnIndex} />\n    <tbody\n      onClick={React.useCallback(\n        event => {\n          const dataset = (event.target as HTMLElement).dataset\n          worksheetOperations.setActiveCellAddress(+dataset.rowIndex!, +dataset.columnIndex!)\n        },\n        []\n      )}\n      onChange={React.useCallback(\n        event => {\n          if (event.target instanceof HTMLInputElement) {\n            worksheetOperations.setActiveCellContent(event.target.value)\n          }\n        },\n        []\n      )}\n    >\n      {\n        mapRangeInclusive(maxCellAddress.rowIndex, rowIndex => (\n          <WorksheetRowMemoized\n            key={rowIndex}\n            rowIndex={rowIndex}\n            row={cellContents[rowIndex]}\n            activeCellIndex={rowIndex === activeCellAddress.rowIndex ? activeCellAddress.columnIndex : undefined}\n            maxColumnIndex={maxCellAddress.columnIndex}\n          />\n        ))\n      }\n    </tbody>\n  </table>\n)\nconst WorksheetTableMemoized = React.memo(WorksheetTable)\n\nexport default () => {\n  const [state, setState] = React.useState(createWorksheet())\n  const worksheetOperations = new WorksheetOperations(\n    mutate => setState(produce(mutate))\n  )\n  React.useEffect(() => {\n    const handleKeyDown = createWorksheetKeyEventHandler(worksheetOperations)\n    window.addEventListener('keydown', handleKeyDown)\n    return () => window.removeEventListener('keydown', handleKeyDown)\n  }, [])\n  return (\n    <WorksheetTableMemoized\n      worksheet={state}\n      worksheetOperations={worksheetOperations}\n    />\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Worksheet from './Worksheet'\nimport '../../common/styles.css'\n\nReactDOM.render(<Worksheet />, document.body.appendChild(document.createElement('main')))\n","export var createEmptyWorksheet = function createEmptyWorksheet(_ref) {\n  var maxCellAddress = _ref.maxCellAddress;\n  return {\n    maxCellAddress: maxCellAddress,\n    activeCellAddress: {\n      rowIndex: 0,\n      columnIndex: 0\n    },\n    cellContents: []\n  };\n};","import { createEmptyWorksheet } from '../../usecase'\n\nexport default () => createEmptyWorksheet({\n  maxCellAddress: {\n    rowIndex: 99,\n    columnIndex: 99,\n  }\n})\n","import { WorksheetOperations } from '../../usecase'\n\nexport default (operations: WorksheetOperations) => (event: KeyboardEvent) => {\n  // ignore IME conversion\n  if (event.keyCode === 229) {\n    return\n  }\n  switch (event.key) {\n    case 'ArrowDown':\n      event.preventDefault()\n      operations.moveActiveCellAddress(1)\n      break\n    case 'ArrowLeft':\n      event.preventDefault()\n      operations.moveActiveCellAddress(0, -1)\n      break\n    case 'ArrowRight':\n      event.preventDefault()\n      operations.moveActiveCellAddress(0, 1)\n      break\n    case 'ArrowUp':\n      event.preventDefault()\n      operations.moveActiveCellAddress(-1)\n      break\n    case 'Tab':\n      event.preventDefault()\n      operations.moveActiveCellAddress(0, event.shiftKey ? -1 : 1)\n      break\n    case 'Enter':\n      event.preventDefault()\n      operations.moveActiveCellAddress(event.shiftKey ? -1 : 1)\n      break\n    default:\n      break\n  }\n}\n"],"sourceRoot":""}